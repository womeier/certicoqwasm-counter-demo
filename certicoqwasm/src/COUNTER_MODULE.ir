
letrec [
  fun compare_cont_uncurried_uncurried_known_108<88>(y_239,x_240,r_241) := 
    case x_240 of {
    | xI => 
      let p_242 := proj_0 134 x_240 in 
      case y_239 of {
      | xI => 
        let q_243 := proj_0 134 y_239 in 
        compare_cont_uncurried_uncurried_known_108<88>(q_243,p_242,r_241)
      | xO => 
        let q_244 := proj_0 135 y_239 in 
        let y_245 := Gt() in 
        compare_cont_uncurried_uncurried_known_108<88>(q_244,p_242,y_245)
      | xH => 
        let y_246 := Gt() in 
        halt y_246
      }
    | xO => 
      let p_247 := proj_0 135 x_240 in 
      case y_239 of {
      | xI => 
        let q_248 := proj_0 134 y_239 in 
        let y_249 := Lt() in 
        compare_cont_uncurried_uncurried_known_108<88>(q_248,p_247,y_249)
      | xO => 
        let q_250 := proj_0 135 y_239 in 
        compare_cont_uncurried_uncurried_known_108<88>(q_250,p_247,r_241)
      | xH => 
        let y_251 := Gt() in 
        halt y_251
      }
    | xH => 
      case y_239 of {
      | xI => 
        let y_252 := Lt() in 
        halt y_252
      | xO => 
        let y_253 := Lt() in 
        halt y_253
      | xH => 
        halt r_241
      }
    }
  fun Coq.NArith.BinNatDef.N.compare_uncurried_known_109<88>(m_255,n_256,y_257) := 
    case n_256 of {
    | N0 => 
      case m_255 of {
      | N0 => 
        let y_258 := Eq() in 
        halt y_258
      | Npos => 
        let y_259 := Lt() in 
        halt y_259
      }
    | Npos => 
      let n'_260 := proj_0 115 n_256 in 
      case m_255 of {
      | N0 => 
        let y_261 := Gt() in 
        halt y_261
      | Npos => 
        let m'_262 := proj_0 115 m_255 in 
        compare_cont_uncurried_uncurried_known_108<88>(m'_262,n'_260,y_257)
      }
    }
  fun Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(m_265,n_266) := 
    case n_266 of {
    | N0 => 
      case m_265 of {
      | N0 => 
        let y_267 := true() in 
        halt y_267
      | Npos => 
        let y_268 := false() in 
        halt y_268
      }
    | Npos => 
      let p_269 := proj_0 115 n_266 in 
      case m_265 of {
      | N0 => 
        let y_270 := false() in 
        halt y_270
      | Npos => 
        let q_271 := proj_0 115 m_265 in 
        eqb_uncurried_known_111<3>(q_271,p_269)
      }
    }
  fun eqb_uncurried_known_111<3>(q_274,p_275) := 
    case p_275 of {
    | xI => 
      let p_276 := proj_0 134 p_275 in 
      case q_274 of {
      | xI => 
        let q_277 := proj_0 134 q_274 in 
        eqb_uncurried_known_111<3>(q_277,p_276)
      | xO => 
        let y_278 := false() in 
        halt y_278
      | xH => 
        let y_279 := false() in 
        halt y_279
      }
    | xO => 
      let p_280 := proj_0 135 p_275 in 
      case q_274 of {
      | xI => 
        let y_281 := false() in 
        halt y_281
      | xO => 
        let q_282 := proj_0 135 q_274 in 
        eqb_uncurried_known_111<3>(q_282,p_280)
      | xH => 
        let y_283 := false() in 
        halt y_283
      }
    | xH => 
      case q_274 of {
      | xI => 
        let y_284 := false() in 
        halt y_284
      | xO => 
        let y_285 := false() in 
        halt y_285
      | xH => 
        let y_286 := true() in 
        halt y_286
      }
    }
  fun ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<127>(n_288) := 
    case n_288 of {
    | bounded => 
      let val_290 := proj_0 110 n_288 in 
      halt val_290
    }
  fun ConCert.Execution.BoundedN.BoundedN.eqb_spec_uncurried_uncurried_known_113<3>(b_292,a_293) := 
    let y_296 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<127>(a_293) in 
    let y_298 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<127>(b_292) in 
    let y_300 := app Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_298,y_296) in 
    let y_302 := app f_case_known_114<128>(y_300) in 
    let y_303 := con_99() in 
    let y_code_304 := proj_0 15 y_302 in 
    let y_env_305 := proj_1 15 y_302 in 
    let r_306 := app y_code_304<3>(y_env_305,y_303) in 
    let y_308 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<127>(a_293) in 
    let y_310 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<127>(b_292) in 
    let b0_312 := app Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_310,y_308) in 
    let y_314 := app f_case_known_117<129>(r_306) in 
    halt y_314
  fun f_case_known_114<128>(s_316) := 
    case s_316 of {
    | true => 
      let env_317 := con_160() in 
      let y_wrapper_clo_318 := con_15(y_wrapper_115,env_317) in 
      halt y_wrapper_clo_318
    | false => 
      let env_319 := con_163() in 
      let y_wrapper_clo_320 := con_15(y_wrapper_116,env_319) in 
      halt y_wrapper_clo_320
    }
  fun y_wrapper_115<3>(env_321,H_322) := 
    let y_323 := con_99() in 
    let y_324 := ReflectT(y_323) in 
    halt y_324
  fun y_wrapper_116<3>(env_325,H_326) := 
    let y_327 := con_99() in 
    let y_328 := ReflectF(y_327) in 
    halt y_328
  fun f_case_known_117<129>(s_330) := 
    case s_330 of {
    | ReflectT => 
      let y_331 := con_99() in 
      let y_332 := ReflectT(y_331) in 
      halt y_332
    | ReflectF => 
      let y_333 := con_99() in 
      let y_334 := ReflectF(y_333) in 
      halt y_334
    }
  fun ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_336,x_337) := 
    let r_340 := app ConCert.Execution.BoundedN.BoundedN.eqb_spec_uncurried_uncurried_known_113<3>(y_336,x_337) in 
    let y_342 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<127>(x_337) in 
    let y_344 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<127>(y_336) in 
    let b_346 := app Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_344,y_342) in 
    case r_340 of {
    | ReflectT => 
      let y_347 := con_99() in 
      let y_348 := left(y_347) in 
      halt y_348
    | ReflectF => 
      let y_349 := con_99() in 
      let y_350 := right(y_349) in 
      halt y_350
    }
  fun stdpp.countable.encode_uncurried_uncurried_known_119<130>(Countable_352) := 
    case Countable_352 of {
    | Build_Countable => 
      let encode_355 := proj_0 131 Countable_352 in 
      halt encode_355
    }
  fun Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(s_357,f0_358,f_359) := 
    case s_357 of {
    | left => 
      let y_363 := con_99() in 
      let f_code_364 := proj_0 15 f_359 in 
      let f_env_365 := proj_1 15 f_359 in 
      f_code_364<3>(f_env_365,y_363)
    | right => 
      let y_366 := con_99() in 
      let f0_code_367 := proj_0 15 f0_358 in 
      let f0_env_368 := proj_1 15 f0_358 in 
      f0_code_367<3>(f0_env_368,y_366)
    }
  fun y_known_121<131>(x0_370) := 
    case x0_370 of {
    | xI => 
      let y_371 := con_99() in 
      let y_372 := right(y_371) in 
      halt y_372
    | xO => 
      let y_373 := con_99() in 
      let y_374 := right(y_373) in 
      halt y_374
    | xH => 
      let y_375 := con_99() in 
      let y_376 := left(y_375) in 
      halt y_376
    }
  fun y_wrapper_122<3>(env_377,x0_378) := 
    y_known_121<131>(x0_378)
  fun F_known_123<132>(p_381) := 
    case p_381 of {
    | xI => 
      let p_382 := proj_0 134 p_381 in 
      let y_383 := app F_known_123<132>(p_382) in 
      let env_384 := con_189(y_383) in 
      let y_wrapper_clo_385 := con_15(y_wrapper_127,env_384) in 
      halt y_wrapper_clo_385
    | xO => 
      let p_386 := proj_0 135 p_381 in 
      let y_387 := app F_known_123<132>(p_386) in 
      let env_388 := con_199(y_387) in 
      let y_wrapper_clo_389 := con_15(y_wrapper_131,env_388) in 
      halt y_wrapper_clo_389
    | xH => 
      let y_wrapperbogus_env_390 := con_201() in 
      let y_wrapper_clo_391 := con_15(y_wrapper_122,y_wrapperbogus_env_390) in 
      halt y_wrapper_clo_391
    }
  fun y_known_124<3>(x0_393,y_394) := 
    case x0_393 of {
    | xI => 
      let p_395 := proj_0 134 x0_393 in 
      let env_399 := con_183() in 
      let env_400 := con_186() in 
      let y_code_401 := proj_0 15 y_394 in 
      let y_env_402 := proj_1 15 y_394 in 
      let y_403 := app y_code_401<3>(y_env_402,p_395) in 
      let y_wrapper_clo_405 := con_15(y_wrapper_126,env_400) in 
      let y_wrapper_clo_406 := con_15(y_wrapper_125,env_399) in 
      Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(y_403,y_wrapper_clo_405,y_wrapper_clo_406)
    | xO => 
      let y_407 := con_99() in 
      let y_408 := right(y_407) in 
      halt y_408
    | xH => 
      let y_409 := con_99() in 
      let y_410 := right(y_409) in 
      halt y_410
    }
  fun y_wrapper_125<3>(env_411,a_412) := 
    let y_413 := con_99() in 
    let y_414 := left(y_413) in 
    halt y_414
  fun y_wrapper_126<3>(env_415,diseq_416) := 
    let y_417 := con_99() in 
    let y_418 := right(y_417) in 
    halt y_418
  fun y_wrapper_127<3>(env_419,x0_420) := 
    let y_proj_422 := proj_0 189 env_419 in 
    y_known_124<3>(x0_420,y_proj_422)
  fun y_known_128<3>(x0_424,y_425) := 
    case x0_424 of {
    | xI => 
      let y_426 := con_99() in 
      let y_427 := right(y_426) in 
      halt y_427
    | xO => 
      let p_428 := proj_0 135 x0_424 in 
      let env_432 := con_193() in 
      let env_433 := con_196() in 
      let y_code_434 := proj_0 15 y_425 in 
      let y_env_435 := proj_1 15 y_425 in 
      let y_436 := app y_code_434<3>(y_env_435,p_428) in 
      let y_wrapper_clo_438 := con_15(y_wrapper_130,env_433) in 
      let y_wrapper_clo_439 := con_15(y_wrapper_129,env_432) in 
      Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(y_436,y_wrapper_clo_438,y_wrapper_clo_439)
    | xH => 
      let y_440 := con_99() in 
      let y_441 := right(y_440) in 
      halt y_441
    }
  fun y_wrapper_129<3>(env_442,a_443) := 
    let y_444 := con_99() in 
    let y_445 := left(y_444) in 
    halt y_445
  fun y_wrapper_130<3>(env_446,diseq_447) := 
    let y_448 := con_99() in 
    let y_449 := right(y_448) in 
    halt y_449
  fun y_wrapper_131<3>(env_450,x0_451) := 
    let y_proj_453 := proj_0 199 env_450 in 
    y_known_128<3>(x0_451,y_proj_453)
  fun y_wrapper_132<3>(env_454,m_455) := 
    let n_proj_456 := proj_0 205 env_454 in 
    let y_458 := app f_case_known_135<134>(n_proj_456) in 
    let y_code_459 := proj_0 15 y_458 in 
    let y_env_460 := proj_1 15 y_458 in 
    y_code_459<3>(y_env_460,m_455)
  fun y_known_133<133>(x_462) := 
    case x_462 of {
    | N0 => 
      let y_463 := con_99() in 
      let y_464 := left(y_463) in 
      halt y_464
    | Npos => 
      let y_465 := con_99() in 
      let y_466 := right(y_465) in 
      halt y_466
    }
  fun y_wrapper_134<3>(env_467,x_468) := 
    y_known_133<133>(x_468)
  fun f_case_known_135<134>(s_471) := 
    case s_471 of {
    | N0 => 
      let y_wrapperbogus_env_472 := con_211() in 
      let y_wrapper_clo_473 := con_15(y_wrapper_134,y_wrapperbogus_env_472) in 
      halt y_wrapper_clo_473
    | Npos => 
      let p_474 := proj_0 115 s_471 in 
      let env_475 := con_221(p_474) in 
      let y_wrapper_clo_476 := con_15(y_wrapper_139,env_475) in 
      halt y_wrapper_clo_476
    }
  fun y_known_136<3>(x_478,p_479) := 
    case x_478 of {
    | N0 => 
      let y_480 := con_99() in 
      let y_481 := right(y_480) in 
      halt y_481
    | Npos => 
      let p_482 := proj_0 115 x_478 in 
      let env_486 := con_214() in 
      let env_487 := con_217() in 
      let y_489 := app F_known_123<132>(p_479) in 
      let y_code_490 := proj_0 15 y_489 in 
      let y_env_491 := proj_1 15 y_489 in 
      let y_492 := app y_code_490<3>(y_env_491,p_482) in 
      let y_wrapper_clo_494 := con_15(y_wrapper_138,env_487) in 
      let y_wrapper_clo_495 := con_15(y_wrapper_137,env_486) in 
      Coq.Init.Specif.sumbool_rec_uncurried_uncurried_uncurried_uncurried_uncurried_known_120<88>(y_492,y_wrapper_clo_494,y_wrapper_clo_495)
    }
  fun y_wrapper_137<3>(env_496,a_497) := 
    let y_498 := con_99() in 
    let y_499 := left(y_498) in 
    halt y_499
  fun y_wrapper_138<3>(env_500,diseq_501) := 
    let y_502 := con_99() in 
    let y_503 := right(y_502) in 
    halt y_503
  fun y_wrapper_139<3>(env_504,x_505) := 
    let p_proj_507 := proj_0 221 env_504 in 
    y_known_136<3>(x_505,p_proj_507)
  fun Coq.NArith.BinNat.N.eq_dec_wrapper_140<3>(env_508,n_509) := 
    let env_510 := con_205(n_509) in 
    let y_wrapper_clo_511 := con_15(y_wrapper_132,env_510) in 
    halt y_wrapper_clo_511
  fun succ_known_141<135>(x_513) := 
    case x_513 of {
    | xI => 
      let p_514 := proj_0 134 x_513 in 
      let y_515 := app succ_known_141<135>(p_514) in 
      let y_516 := xO(y_515) in 
      halt y_516
    | xO => 
      let p_517 := proj_0 135 x_513 in 
      let y_518 := xI(p_517) in 
      halt y_518
    | xH => 
      let y_519 := xH() in 
      let y_520 := xO(y_519) in 
      halt y_520
    }
  fun pred_double_known_142<136>(x_522) := 
    case x_522 of {
    | xI => 
      let p_523 := proj_0 134 x_522 in 
      let y_524 := xO(p_523) in 
      let y_525 := xI(y_524) in 
      halt y_525
    | xO => 
      let p_526 := proj_0 135 x_522 in 
      let y_527 := app pred_double_known_142<136>(p_526) in 
      let y_528 := xI(y_527) in 
      halt y_528
    | xH => 
      let y_529 := xH() in 
      halt y_529
    }
  fun program_branch_0_wrapper_143<3>(env_530,Heq_x_531) := 
    let y_532 := xH() in 
    halt y_532
  fun f_case_known_144<137>(s_534) := 
    case s_534 of {
    | N0 => 
      let program_branch_0_wrapperbogus_env_535 := con_234() in 
      let program_branch_0_wrapper_clo_536 := con_15(program_branch_0_wrapper_143,program_branch_0_wrapperbogus_env_535) in 
      halt program_branch_0_wrapper_clo_536
    | Npos => 
      let p_537 := proj_0 115 s_534 in 
      let env_538 := con_237(p_537) in 
      let y_wrapper_clo_539 := con_15(y_wrapper_145,env_538) in 
      halt y_wrapper_clo_539
    }
  fun y_wrapper_145<3>(env_540,Heq_x_541) := 
    let p_proj_542 := proj_0 237 env_540 in 
    succ_known_141<135>(p_proj_542)
  fun y_wrapper_146<3>(env_544,x_545) := 
    let y_547 := app f_case_known_144<137>(x_545) in 
    let y_548 := con_99() in 
    let y_code_549 := proj_0 15 y_547 in 
    let y_env_550 := proj_1 15 y_547 in 
    y_code_549<3>(y_env_550,y_548)
  fun y_known_147<138>(p_552) := 
    let y_553 := xH() in 
    let y_555 := app F_known_123<132>(p_552) in 
    let y_code_556 := proj_0 15 y_555 in 
    let y_env_557 := proj_1 15 y_555 in 
    let y_558 := app y_code_556<3>(y_env_557,y_553) in 
    case y_558 of {
    | left => 
      let y_559 := N0() in 
      let y_560 := Some(y_559) in 
      halt y_560
    | right => 
      let y_562 := app f_case_known_148<139>(p_552) in 
      let y_563 := Npos(y_562) in 
      let y_564 := Some(y_563) in 
      halt y_564
    }
  fun f_case_known_148<139>(s_566) := 
    case s_566 of {
    | xI => 
      let p_567 := proj_0 134 s_566 in 
      let y_568 := xO(p_567) in 
      halt y_568
    | xO => 
      let p_569 := proj_0 135 s_566 in 
      pred_double_known_142<136>(p_569)
    | xH => 
      let y_571 := xH() in 
      halt y_571
    }
  fun y_wrapper_149<3>(env_572,p_573) := 
    y_known_147<138>(p_573)
  fun ConCert.Execution.Monad.bind_uncurried_known_150<140>(Monad_576) := 
    case Monad_576 of {
    | build_monad => 
      let bind_578 := proj_1 108 Monad_576 in 
      halt bind_578
    }
  fun y_wrapper_151<3>(env_579,t_580) := 
    let y_581 := Some(t_580) in 
    halt y_581
  fun y_wrapper_152<3>(env_582,t_583) := 
    let env_584 := con_250() in 
    let y_wrapper_clo_585 := con_15(y_wrapper_151,env_584) in 
    halt y_wrapper_clo_585
  fun y_wrapper_153<3>(env_586,f_587) := 
    let v_proj_590 := proj_0 259 env_586 in 
    y_uncurried_uncurried_uncurried_known_156<3>(f_587,v_proj_590)
  fun y_wrapper_154<3>(env_592,v_593) := 
    let t_proj_594 := proj_1 261 env_592 in 
    let u_proj_595 := proj_0 261 env_592 in 
    let env_596 := con_259(v_593,u_proj_595,t_proj_594) in 
    let y_wrapper_clo_597 := con_15(y_wrapper_153,env_596) in 
    halt y_wrapper_clo_597
  fun y_wrapper_155<3>(env_598,u_599) := 
    let t_proj_600 := proj_0 263 env_598 in 
    let env_601 := con_261(u_599,t_proj_600) in 
    let y_wrapper_clo_602 := con_15(y_wrapper_154,env_601) in 
    halt y_wrapper_clo_602
  fun y_uncurried_uncurried_uncurried_known_156<3>(f_604,v_605) := 
    case v_605 of {
    | Some => 
      let val_608 := proj_0 132 v_605 in 
      let f_code_609 := proj_0 15 f_604 in 
      let f_env_610 := proj_1 15 f_604 in 
      f_code_609<3>(f_env_610,val_608)
    | None => 
      let y_611 := None() in 
      halt y_611
    }
  fun y_wrapper_157<3>(env_612,t_613) := 
    let env_614 := con_263(t_613) in 
    let y_wrapper_clo_615 := con_15(y_wrapper_155,env_614) in 
    halt y_wrapper_clo_615
  fun stdpp.countable.decode_uncurried_uncurried_known_158<141>(Countable_617) := 
    case Countable_617 of {
    | Build_Countable => 
      let decode_620 := proj_1 131 Countable_617 in 
      halt decode_620
    }
  fun y_known_159<3>(n_622,stdpp.countable.N_countable_623) := 
    let y_629 := app stdpp.countable.encode_uncurried_uncurried_known_119<130>(stdpp.countable.N_countable_623) in 
    let y_631 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<127>(n_622) in 
    let y_code_632 := proj_0 15 y_629 in 
    let y_env_633 := proj_1 15 y_629 in 
    y_code_632<3>(y_env_633,y_631)
  fun y_wrapper_160<3>(env_634,n_635) := 
    let stdpp.countable.N_countable_proj_637 := proj_1 273 env_634 in 
    y_known_159<3>(n_635,stdpp.countable.N_countable_proj_637)
  fun y_161<3>(env_639,n_640) := 
    let ConCert.Execution.OptionMonad.Monad_option_proj_643 := proj_1 275 env_639 in 
    let y_644 := app ConCert.Execution.Monad.bind_uncurried_known_150<140>(ConCert.Execution.OptionMonad.Monad_option_proj_643) in 
    let y_645 := con_99() in 
    let y_code_646 := proj_0 15 y_644 in 
    let y_env_647 := proj_1 15 y_644 in 
    let y_648 := app y_code_646<3>(y_env_647,y_645) in 
    let y_649 := con_99() in 
    let y_code_650 := proj_0 15 y_648 in 
    let y_env_651 := proj_1 15 y_648 in 
    let y_652 := app y_code_650<3>(y_env_651,y_649) in 
    let stdpp.countable.N_countable_proj_655 := proj_2 275 env_639 in 
    let y_658 := app stdpp.countable.decode_uncurried_uncurried_known_158<141>(stdpp.countable.N_countable_proj_655) in 
    let y_code_659 := proj_0 15 y_658 in 
    let y_env_660 := proj_1 15 y_658 in 
    let y_661 := app y_code_659<3>(y_env_660,n_640) in 
    let y_code_662 := proj_0 15 y_652 in 
    let y_env_663 := proj_1 15 y_652 in 
    let y_664 := app y_code_662<3>(y_env_663,y_661) in 
    let bound_proj_665 := proj_0 275 env_639 in 
    let y_proj_666 := proj_3 275 env_639 in 
    let env_667 := con_282(bound_proj_665,y_proj_666) in 
    let y_wrapper_clo_668 := con_15(y_wrapper_164,env_667) in 
    let y_code_669 := proj_0 15 y_664 in 
    let y_env_670 := proj_1 15 y_664 in 
    y_code_669<3>(y_env_670,y_wrapper_clo_668)
  fun y_known_162<88>(n_672,y_673,bound_674) := 
    let y_677 := app Coq.NArith.BinNatDef.N.compare_uncurried_known_109<88>(n_672,bound_674,y_673) in 
    let y_678 := app f_case_known_163<142>(y_677) in 
    case y_678 of {
    | Some => 
      let y_679 := con_99() in 
      let y_680 := bounded(n_672,y_679) in 
      let y_681 := Some(y_680) in 
      halt y_681
    | None => 
      let y_682 := None() in 
      halt y_682
    }
  fun f_case_known_163<142>(s_684) := 
    case s_684 of {
    | Eq => 
      let y_685 := None() in 
      halt y_685
    | Lt => 
      let y_686 := None() in 
      halt y_686
    | Gt => 
      let y_687 := con_99() in 
      let y_688 := Some(y_687) in 
      halt y_688
    }
  fun y_wrapper_164<3>(env_689,n_690) := 
    let y_proj_692 := proj_1 282 env_689 in 
    let bound_proj_693 := proj_0 282 env_689 in 
    y_known_162<88>(n_690,y_proj_692,bound_proj_693)
  fun ConCert.Execution.Serializable.serialize_uncurried_known_165<143>(Serializable_695) := 
    case Serializable_695 of {
    | build_serializable => 
      let serialize_697 := proj_0 118 Serializable_695 in 
      halt serialize_697
    }
  fun y_wrapper_166<3>(env_698,i_699) := 
    let y_700 := ser_int() in 
    let y_701 := build_ser_value(y_700,i_699) in 
    halt y_701
  fun y_167<3>(env_702,value_703) := 
    let y_705 := app f_case_known_168<144>(value_703) in 
    let y_707 := app f_case_known_169<145>(value_703) in 
    let y_proj_709 := proj_0 288 env_702 in 
    let b_710 := app SerializedType_eqrec_uncurried_known_170<3>(y_705,y_proj_709) in 
    let H_712 := app f_case_known_171<146>(b_710) in 
    let s_714 := app f_case_known_172<147>(H_712) in 
    case s_714 of {
    | left => 
      let y_715 := Some(y_707) in 
      halt y_715
    | right => 
      let y_716 := None() in 
      halt y_716
    }
  fun f_case_known_168<144>(s_718) := 
    case s_718 of {
    | build_ser_value => 
      let anon_719 := proj_0 119 s_718 in 
      halt anon_719
    }
  fun f_case_known_169<145>(s_721) := 
    case s_721 of {
    | build_ser_value => 
      let anon_722 := proj_1 119 s_721 in 
      halt anon_722
    }
  fun SerializedType_eqrec_uncurried_known_170<3>(Y_724,X_725) := 
    case X_725 of {
    | ser_unit => 
      case Y_724 of {
      | ser_unit => 
        let y_726 := true() in 
        halt y_726
      | ser_int => 
        let y_727 := false() in 
        halt y_727
      | ser_bool => 
        let y_728 := false() in 
        halt y_728
      | ser_pair => 
        let y_729 := false() in 
        halt y_729
      | ser_list => 
        let y_730 := false() in 
        halt y_730
      }
    | ser_int => 
      case Y_724 of {
      | ser_unit => 
        let y_731 := false() in 
        halt y_731
      | ser_int => 
        let y_732 := true() in 
        halt y_732
      | ser_bool => 
        let y_733 := false() in 
        halt y_733
      | ser_pair => 
        let y_734 := false() in 
        halt y_734
      | ser_list => 
        let y_735 := false() in 
        halt y_735
      }
    | ser_bool => 
      case Y_724 of {
      | ser_unit => 
        let y_736 := false() in 
        halt y_736
      | ser_int => 
        let y_737 := false() in 
        halt y_737
      | ser_bool => 
        let y_738 := true() in 
        halt y_738
      | ser_pair => 
        let y_739 := false() in 
        halt y_739
      | ser_list => 
        let y_740 := false() in 
        halt y_740
      }
    | ser_pair => 
      let anon_741 := proj_0 129 X_725 in 
      let anon_742 := proj_1 129 X_725 in 
      case Y_724 of {
      | ser_unit => 
        let y_743 := false() in 
        halt y_743
      | ser_int => 
        let y_744 := false() in 
        halt y_744
      | ser_bool => 
        let y_745 := false() in 
        halt y_745
      | ser_pair => 
        let anon_746 := proj_0 129 Y_724 in 
        let anon_747 := proj_1 129 Y_724 in 
        let y_748 := app SerializedType_eqrec_uncurried_known_170<3>(anon_746,anon_741) in 
        let y_749 := app SerializedType_eqrec_uncurried_known_170<3>(anon_747,anon_742) in 
        case y_748 of {
        | true => 
          halt y_749
        | false => 
          let y_750 := false() in 
          halt y_750
        }
      | ser_list => 
        let y_751 := false() in 
        halt y_751
      }
    | ser_list => 
      let anon_752 := proj_0 130 X_725 in 
      case Y_724 of {
      | ser_unit => 
        let y_753 := false() in 
        halt y_753
      | ser_int => 
        let y_754 := false() in 
        halt y_754
      | ser_bool => 
        let y_755 := false() in 
        halt y_755
      | ser_pair => 
        let y_756 := false() in 
        halt y_756
      | ser_list => 
        let anon_757 := proj_0 130 Y_724 in 
        SerializedType_eqrec_uncurried_known_170<3>(anon_757,anon_752)
      }
    }
  fun f_case_known_171<146>(s_759) := 
    case s_759 of {
    | true => 
      let y_760 := con_99() in 
      let y_761 := left(y_760) in 
      halt y_761
    | false => 
      let y_762 := con_99() in 
      let y_763 := right(y_762) in 
      halt y_763
    }
  fun f_case_known_172<147>(s_765) := 
    case s_765 of {
    | left => 
      let y_766 := con_99() in 
      let y_767 := left(y_766) in 
      halt y_767
    | right => 
      let y_768 := con_99() in 
      let y_769 := right(y_768) in 
      halt y_769
    }
  fun ConCert.Execution.Serializable.deserialize_uncurried_known_173<148>(Serializable_771) := 
    case Serializable_771 of {
    | build_serializable => 
      let deserialize_773 := proj_1 118 Serializable_771 in 
      halt deserialize_773
    }
  fun Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(y_775,x_776,y_777) := 
    let y_779 := app f_case_known_175<88>(x_776,y_777,y_775) in 
    case y_779 of {
    | Eq => 
      let y_780 := false() in 
      halt y_780
    | Lt => 
      let y_781 := true() in 
      halt y_781
    | Gt => 
      let y_782 := false() in 
      halt y_782
    }
  fun f_case_known_175<88>(s_784,y_785,y_786) := 
    case s_784 of {
    | Z0 => 
      case y_786 of {
      | Z0 => 
        let y_787 := Eq() in 
        halt y_787
      | Zpos => 
        let y_788 := Lt() in 
        halt y_788
      | Zneg => 
        let y_789 := Gt() in 
        halt y_789
      }
    | Zpos => 
      let x'_790 := proj_0 124 s_784 in 
      case y_786 of {
      | Z0 => 
        let y_791 := Gt() in 
        halt y_791
      | Zpos => 
        let y'_792 := proj_0 124 y_786 in 
        compare_cont_uncurried_uncurried_known_108<88>(y'_792,x'_790,y_785)
      | Zneg => 
        let y_794 := Gt() in 
        halt y_794
      }
    | Zneg => 
      let x'_795 := proj_0 125 s_784 in 
      case y_786 of {
      | Z0 => 
        let y_796 := Lt() in 
        halt y_796
      | Zpos => 
        let y_797 := Lt() in 
        halt y_797
      | Zneg => 
        let y'_798 := proj_0 125 y_786 in 
        let y_800 := app compare_cont_uncurried_uncurried_known_108<88>(y'_798,x'_795,y_785) in 
        case y_800 of {
        | Eq => 
          let y_801 := Eq() in 
          halt y_801
        | Lt => 
          let y_802 := Gt() in 
          halt y_802
        | Gt => 
          let y_803 := Lt() in 
          halt y_803
        }
      }
    }
  fun y_wrapper_176<3>(env_804,p_805) := 
    let ConCert.Execution.Serializable.int_serializable_proj_806 := proj_0 301 env_804 in 
    let y_809 := app ConCert.Execution.Serializable.serialize_uncurried_known_165<143>(ConCert.Execution.Serializable.int_serializable_proj_806) in 
    let y_810 := Zpos(p_805) in 
    let y_code_811 := proj_0 15 y_809 in 
    let y_env_812 := proj_1 15 y_809 in 
    y_code_811<3>(y_env_812,y_810)
  fun y_177<3>(env_813,z_814) := 
    let ConCert.Execution.OptionMonad.Monad_option_proj_817 := proj_1 303 env_813 in 
    let y_818 := app ConCert.Execution.Monad.bind_uncurried_known_150<140>(ConCert.Execution.OptionMonad.Monad_option_proj_817) in 
    let y_819 := con_99() in 
    let y_code_820 := proj_0 15 y_818 in 
    let y_env_821 := proj_1 15 y_818 in 
    let y_822 := app y_code_820<3>(y_env_821,y_819) in 
    let y_823 := con_99() in 
    let y_code_824 := proj_0 15 y_822 in 
    let y_env_825 := proj_1 15 y_822 in 
    let y_826 := app y_code_824<3>(y_env_825,y_823) in 
    let ConCert.Execution.Serializable.int_serializable_proj_829 := proj_2 303 env_813 in 
    let y_830 := app ConCert.Execution.Serializable.deserialize_uncurried_known_173<148>(ConCert.Execution.Serializable.int_serializable_proj_829) in 
    let y_code_831 := proj_0 15 y_830 in 
    let y_env_832 := proj_1 15 y_830 in 
    let y_833 := app y_code_831<3>(y_env_832,z_814) in 
    let y_code_834 := proj_0 15 y_826 in 
    let y_env_835 := proj_1 15 y_826 in 
    let y_836 := app y_code_834<3>(y_env_835,y_833) in 
    let y_proj_837 := proj_0 303 env_813 in 
    let env_838 := con_309(y_proj_837) in 
    let y_wrapper_clo_839 := con_15(y_wrapper_180,env_838) in 
    let y_code_840 := proj_0 15 y_836 in 
    let y_env_841 := proj_1 15 y_836 in 
    y_code_840<3>(y_env_841,y_wrapper_clo_839)
  fun y_known_178<3>(z'_843,y_844) := 
    let y_845 := Z0() in 
    let y_847 := app Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(z'_843,y_845,y_844) in 
    case y_847 of {
    | true => 
      let y_849 := app f_case_known_179<149>(z'_843) in 
      let y_850 := Some(y_849) in 
      halt y_850
    | false => 
      let y_851 := None() in 
      halt y_851
    }
  fun f_case_known_179<149>(s_853) := 
    case s_853 of {
    | Z0 => 
      let y_854 := xH() in 
      halt y_854
    | Zpos => 
      let p_855 := proj_0 124 s_853 in 
      halt p_855
    | Zneg => 
      let y_856 := xH() in 
      halt y_856
    }
  fun y_wrapper_180<3>(env_857,z'_858) := 
    let y_proj_860 := proj_0 309 env_857 in 
    y_known_178<3>(z'_858,y_proj_860)
  fun Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(y_862,x_863,y_864) := 
    let y_866 := app Coq.NArith.BinNatDef.N.compare_uncurried_known_109<88>(y_862,x_863,y_864) in 
    case y_866 of {
    | Eq => 
      let y_867 := true() in 
      halt y_867
    | Lt => 
      let y_868 := true() in 
      halt y_868
    | Gt => 
      let y_869 := false() in 
      halt y_869
    }
  fun Coq.NArith.BinNatDef.N.succ_double_known_182<150>(x_871) := 
    case x_871 of {
    | N0 => 
      let y_872 := xH() in 
      let y_873 := Npos(y_872) in 
      halt y_873
    | Npos => 
      let p_874 := proj_0 115 x_871 in 
      let y_875 := xI(p_874) in 
      let y_876 := Npos(y_875) in 
      halt y_876
    }
  fun Coq.PArith.BinPosDef.Pos.double_mask_known_183<151>(x_878) := 
    case x_878 of {
    | IsNul => 
      let y_879 := IsNul() in 
      halt y_879
    | IsPos => 
      let p_880 := proj_0 106 x_878 in 
      let y_881 := xO(p_880) in 
      let y_882 := IsPos(y_881) in 
      halt y_882
    | IsNeg => 
      let y_883 := IsNeg() in 
      halt y_883
    }
  fun Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<152>(x_885) := 
    case x_885 of {
    | IsNul => 
      let y_886 := xH() in 
      let y_887 := IsPos(y_886) in 
      halt y_887
    | IsPos => 
      let p_888 := proj_0 106 x_885 in 
      let y_889 := xI(p_888) in 
      let y_890 := IsPos(y_889) in 
      halt y_890
    | IsNeg => 
      let y_891 := IsNeg() in 
      halt y_891
    }
  fun Coq.NArith.BinNatDef.N.sub_uncurried_known_185<3>(m_893,n_894) := 
    case n_894 of {
    | N0 => 
      let y_895 := N0() in 
      halt y_895
    | Npos => 
      let n'_896 := proj_0 115 n_894 in 
      case m_893 of {
      | N0 => 
        halt n_894
      | Npos => 
        let m'_897 := proj_0 115 m_893 in 
        let y_899 := app sub_mask_uncurried_known_186<3>(m'_897,n'_896) in 
        case y_899 of {
        | IsNul => 
          let y_900 := N0() in 
          halt y_900
        | IsPos => 
          let p_901 := proj_0 106 y_899 in 
          let y_902 := Npos(p_901) in 
          halt y_902
        | IsNeg => 
          let y_903 := N0() in 
          halt y_903
        }
      }
    }
  fun sub_mask_uncurried_known_186<3>(y_905,x_906) := 
    case x_906 of {
    | xI => 
      let p_907 := proj_0 134 x_906 in 
      case y_905 of {
      | xI => 
        let q_908 := proj_0 134 y_905 in 
        let y_909 := app sub_mask_uncurried_known_186<3>(q_908,p_907) in 
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<151>(y_909)
      | xO => 
        let q_911 := proj_0 135 y_905 in 
        let y_912 := app sub_mask_uncurried_known_186<3>(q_911,p_907) in 
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<152>(y_912)
      | xH => 
        let y_914 := xO(p_907) in 
        let y_915 := IsPos(y_914) in 
        halt y_915
      }
    | xO => 
      let p_916 := proj_0 135 x_906 in 
      case y_905 of {
      | xI => 
        let q_917 := proj_0 134 y_905 in 
        let y_918 := app sub_mask_carry_uncurried_known_187<3>(q_917,p_916) in 
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<152>(y_918)
      | xO => 
        let q_920 := proj_0 135 y_905 in 
        let y_921 := app sub_mask_uncurried_known_186<3>(q_920,p_916) in 
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<151>(y_921)
      | xH => 
        let y_924 := app pred_double_known_142<136>(p_916) in 
        let y_925 := IsPos(y_924) in 
        halt y_925
      }
    | xH => 
      case y_905 of {
      | xI => 
        let y_926 := IsNeg() in 
        halt y_926
      | xO => 
        let y_927 := IsNeg() in 
        halt y_927
      | xH => 
        let y_928 := IsNul() in 
        halt y_928
      }
    }
  fun sub_mask_carry_uncurried_known_187<3>(y_930,x_931) := 
    case x_931 of {
    | xI => 
      let p_932 := proj_0 134 x_931 in 
      case y_930 of {
      | xI => 
        let q_933 := proj_0 134 y_930 in 
        let y_934 := app sub_mask_carry_uncurried_known_187<3>(q_933,p_932) in 
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<152>(y_934)
      | xO => 
        let q_936 := proj_0 135 y_930 in 
        let y_937 := app sub_mask_uncurried_known_186<3>(q_936,p_932) in 
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<151>(y_937)
      | xH => 
        let y_940 := app pred_double_known_142<136>(p_932) in 
        let y_941 := IsPos(y_940) in 
        halt y_941
      }
    | xO => 
      let p_942 := proj_0 135 x_931 in 
      case y_930 of {
      | xI => 
        let q_943 := proj_0 134 y_930 in 
        let y_944 := app sub_mask_carry_uncurried_known_187<3>(q_943,p_942) in 
        Coq.PArith.BinPosDef.Pos.double_mask_known_183<151>(y_944)
      | xO => 
        let q_946 := proj_0 135 y_930 in 
        let y_947 := app sub_mask_carry_uncurried_known_187<3>(q_946,p_942) in 
        Coq.PArith.BinPosDef.Pos.succ_double_mask_known_184<152>(y_947)
      | xH => 
        case p_942 of {
        | xI => 
          let p_949 := proj_0 134 p_942 in 
          let y_950 := xO(p_949) in 
          let y_951 := xO(y_950) in 
          let y_952 := IsPos(y_951) in 
          halt y_952
        | xO => 
          let p_953 := proj_0 135 p_942 in 
          let y_955 := app pred_double_known_142<136>(p_953) in 
          let y_956 := xO(y_955) in 
          let y_957 := IsPos(y_956) in 
          halt y_957
        | xH => 
          let y_958 := IsNul() in 
          halt y_958
        }
      }
    | xH => 
      let y_959 := IsNeg() in 
      halt y_959
    }
  fun Coq.NArith.BinNatDef.N.double_known_188<153>(n_961) := 
    case n_961 of {
    | N0 => 
      let y_962 := N0() in 
      halt y_962
    | Npos => 
      let p_963 := proj_0 115 n_961 in 
      let y_964 := xO(p_963) in 
      let y_965 := Npos(y_964) in 
      halt y_965
    }
  fun add_uncurried_known_189<3>(y_967,x_968) := 
    case x_968 of {
    | xI => 
      let p_969 := proj_0 134 x_968 in 
      case y_967 of {
      | xI => 
        let q_970 := proj_0 134 y_967 in 
        let y_971 := app add_carry_uncurried_known_190<3>(q_970,p_969) in 
        let y_972 := xO(y_971) in 
        halt y_972
      | xO => 
        let q_973 := proj_0 135 y_967 in 
        let y_974 := app add_uncurried_known_189<3>(q_973,p_969) in 
        let y_975 := xI(y_974) in 
        halt y_975
      | xH => 
        let y_977 := app succ_known_141<135>(p_969) in 
        let y_978 := xO(y_977) in 
        halt y_978
      }
    | xO => 
      let p_979 := proj_0 135 x_968 in 
      case y_967 of {
      | xI => 
        let q_980 := proj_0 134 y_967 in 
        let y_981 := app add_uncurried_known_189<3>(q_980,p_979) in 
        let y_982 := xI(y_981) in 
        halt y_982
      | xO => 
        let q_983 := proj_0 135 y_967 in 
        let y_984 := app add_uncurried_known_189<3>(q_983,p_979) in 
        let y_985 := xO(y_984) in 
        halt y_985
      | xH => 
        let y_986 := xI(p_979) in 
        halt y_986
      }
    | xH => 
      case y_967 of {
      | xI => 
        let q_987 := proj_0 134 y_967 in 
        let y_989 := app succ_known_141<135>(q_987) in 
        let y_990 := xO(y_989) in 
        halt y_990
      | xO => 
        let q_991 := proj_0 135 y_967 in 
        let y_992 := xI(q_991) in 
        halt y_992
      | xH => 
        let y_993 := xH() in 
        let y_994 := xO(y_993) in 
        halt y_994
      }
    }
  fun add_carry_uncurried_known_190<3>(y_996,x_997) := 
    case x_997 of {
    | xI => 
      let p_998 := proj_0 134 x_997 in 
      case y_996 of {
      | xI => 
        let q_999 := proj_0 134 y_996 in 
        let y_1000 := app add_carry_uncurried_known_190<3>(q_999,p_998) in 
        let y_1001 := xI(y_1000) in 
        halt y_1001
      | xO => 
        let q_1002 := proj_0 135 y_996 in 
        let y_1003 := app add_carry_uncurried_known_190<3>(q_1002,p_998) in 
        let y_1004 := xO(y_1003) in 
        halt y_1004
      | xH => 
        let y_1006 := app succ_known_141<135>(p_998) in 
        let y_1007 := xI(y_1006) in 
        halt y_1007
      }
    | xO => 
      let p_1008 := proj_0 135 x_997 in 
      case y_996 of {
      | xI => 
        let q_1009 := proj_0 134 y_996 in 
        let y_1010 := app add_carry_uncurried_known_190<3>(q_1009,p_1008) in 
        let y_1011 := xO(y_1010) in 
        halt y_1011
      | xO => 
        let q_1012 := proj_0 135 y_996 in 
        let y_1013 := app add_uncurried_known_189<3>(q_1012,p_1008) in 
        let y_1014 := xI(y_1013) in 
        halt y_1014
      | xH => 
        let y_1016 := app succ_known_141<135>(p_1008) in 
        let y_1017 := xO(y_1016) in 
        halt y_1017
      }
    | xH => 
      case y_996 of {
      | xI => 
        let q_1018 := proj_0 134 y_996 in 
        let y_1020 := app succ_known_141<135>(q_1018) in 
        let y_1021 := xI(y_1020) in 
        halt y_1021
      | xO => 
        let q_1022 := proj_0 135 y_996 in 
        let y_1024 := app succ_known_141<135>(q_1022) in 
        let y_1025 := xO(y_1024) in 
        halt y_1025
      | xH => 
        let y_1026 := xH() in 
        let y_1027 := xI(y_1026) in 
        halt y_1027
      }
    }
  fun f_case_known_191<3>(s_1029,y_1030) := 
    case s_1029 of {
    | N0 => 
      let y_1031 := xH() in 
      let y_1032 := Npos(y_1031) in 
      halt y_1032
    | Npos => 
      let p_1033 := proj_0 115 s_1029 in 
      let y_1034 := xH() in 
      let env_1035 := con_345(y_1030) in 
      let y_1036 := app iter_fix_uncurried_193<88>(env_1035,p_1033,y_1034) in 
      let y_1037 := Npos(y_1036) in 
      halt y_1037
    }
  fun mul_uncurried_known_192<3>(y_1039,x_1040) := 
    case x_1040 of {
    | xI => 
      let p_1041 := proj_0 134 x_1040 in 
      let y_1042 := app mul_uncurried_known_192<3>(y_1039,p_1041) in 
      let y_1043 := xO(y_1042) in 
      add_uncurried_known_189<3>(y_1043,y_1039)
    | xO => 
      let p_1045 := proj_0 135 x_1040 in 
      let y_1046 := app mul_uncurried_known_192<3>(y_1039,p_1045) in 
      let y_1047 := xO(y_1046) in 
      halt y_1047
    | xH => 
      halt y_1039
    }
  fun iter_fix_uncurried_193<88>(env_1048,n_1049,x_1050) := 
    case n_1049 of {
    | xI => 
      let n'_1051 := proj_0 134 n_1049 in 
      let y_1052 := app iter_fix_uncurried_193<88>(env_1048,n'_1051,x_1050) in 
      let y_1053 := app iter_fix_uncurried_193<88>(env_1048,n'_1051,y_1052) in 
      let y_proj_1055 := proj_0 345 env_1048 in 
      mul_uncurried_known_192<3>(y_1053,y_proj_1055)
    | xO => 
      let n'_1056 := proj_0 135 n_1049 in 
      let y_1057 := app iter_fix_uncurried_193<88>(env_1048,n'_1056,x_1050) in 
      iter_fix_uncurried_193<88>(env_1048,n'_1056,y_1057)
    | xH => 
      let y_proj_1059 := proj_0 345 env_1048 in 
      mul_uncurried_known_192<3>(x_1050,y_proj_1059)
    }
  fun y_wrapper_194<3>(env_1060,b_1061) := 
    let a_proj_1063 := proj_0 353 env_1060 in 
    let y_1065 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<127>(a_proj_1063) in 
    let y_1067 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<127>(b_1061) in 
    Coq.NArith.BinNatDef.N.eqb_uncurried_known_110<3>(y_1067,y_1065)
  fun y_wrapper_195<3>(env_1069,a_1070) := 
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1071 := proj_0 355 env_1069 in 
    let env_1072 := con_353(a_1070,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1071) in 
    let y_wrapper_clo_1073 := con_15(y_wrapper_194,env_1072) in 
    halt y_wrapper_clo_1073
  fun y_wrapper_196<3>(env_1074,b_1075) := 
    let a_proj_1077 := proj_0 360 env_1074 in 
    ConCert.Execution.BoundedN.BoundedN.eqb_spec_uncurried_uncurried_known_113<3>(b_1075,a_proj_1077)
  fun y_wrapper_197<3>(env_1079,a_1080) := 
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1081 := proj_0 362 env_1079 in 
    let env_1082 := con_360(a_1080,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1081) in 
    let y_wrapper_clo_1083 := con_15(y_wrapper_196,env_1082) in 
    halt y_wrapper_clo_1083
  fun y_wrapper_198<3>(env_1084,y_1085) := 
    let x_proj_1087 := proj_0 367 env_1084 in 
    ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_1085,x_proj_1087)
  fun y_wrapper_199<3>(env_1089,x_1090) := 
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1091 := proj_0 369 env_1089 in 
    let env_1092 := con_367(x_1090,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1091) in 
    let y_wrapper_clo_1093 := con_15(y_wrapper_198,env_1092) in 
    halt y_wrapper_clo_1093
  fun y_known_200<99>(bn_1095,y_1096,stdpp.countable.N_countable_1097,ConCert.Execution.OptionMonad.Monad_option_1098,ConCert.Execution.Serializable.ser_positive_equivalence_1099,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1100) := 
    let y_1103 := app ConCert.Execution.Serializable.serialize_uncurried_known_165<143>(ConCert.Execution.Serializable.ser_positive_equivalence_1099) in 
    let env_1106 := con_273(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1100,stdpp.countable.N_countable_1097) in 
    let env_1107 := con_275(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1100,ConCert.Execution.OptionMonad.Monad_option_1098,stdpp.countable.N_countable_1097,y_1096) in 
    let y_1108 := con_99() in 
    let y_wrapper_clo_1109 := con_15(y_wrapper_160,env_1106) in 
    let y_clo_1110 := con_15(y_161,env_1107) in 
    let y_1111 := Build_Countable(y_wrapper_clo_1109,y_clo_1110,y_1108) in 
    let y_1114 := app stdpp.countable.encode_uncurried_uncurried_known_119<130>(y_1111) in 
    let y_code_1115 := proj_0 15 y_1114 in 
    let y_env_1116 := proj_1 15 y_1114 in 
    let y_1117 := app y_code_1115<3>(y_env_1116,bn_1095) in 
    let y_code_1118 := proj_0 15 y_1103 in 
    let y_env_1119 := proj_1 15 y_1103 in 
    y_code_1118<3>(y_env_1119,y_1117)
  fun y_wrapper_201<3>(env_1120,y_1121) := 
    let x_proj_1123 := proj_0 376 env_1120 in 
    ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_1121,x_proj_1123)
  fun y_wrapper_203<3>(env_1130,bn_1131) := 
    let y_proj_1133 := proj_0 382 env_1130 in 
    let stdpp.countable.N_countable_proj_1134 := proj_1 382 env_1130 in 
    let ConCert.Execution.OptionMonad.Monad_option_proj_1135 := proj_2 382 env_1130 in 
    let ConCert.Execution.Serializable.ser_positive_equivalence_proj_1136 := proj_3 382 env_1130 in 
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1137 := proj_4 382 env_1130 in 
    y_known_200<99>(bn_1131,y_proj_1133,stdpp.countable.N_countable_proj_1134,ConCert.Execution.OptionMonad.Monad_option_proj_1135,ConCert.Execution.Serializable.ser_positive_equivalence_proj_1136,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1137)
  fun y_204<3>(env_1138,v_1139) := 
    let ConCert.Execution.OptionMonad.Monad_option_proj_1142 := proj_2 384 env_1138 in 
    let y_1143 := app ConCert.Execution.Monad.bind_uncurried_known_150<140>(ConCert.Execution.OptionMonad.Monad_option_proj_1142) in 
    let y_1144 := con_99() in 
    let y_code_1145 := proj_0 15 y_1143 in 
    let y_env_1146 := proj_1 15 y_1143 in 
    let y_1147 := app y_code_1145<3>(y_env_1146,y_1144) in 
    let y_1148 := con_99() in 
    let y_code_1149 := proj_0 15 y_1147 in 
    let y_env_1150 := proj_1 15 y_1147 in 
    let y_1151 := app y_code_1149<3>(y_env_1150,y_1148) in 
    let ConCert.Execution.Serializable.ser_positive_equivalence_proj_1154 := proj_3 384 env_1138 in 
    let y_1155 := app ConCert.Execution.Serializable.deserialize_uncurried_known_173<148>(ConCert.Execution.Serializable.ser_positive_equivalence_proj_1154) in 
    let y_code_1156 := proj_0 15 y_1155 in 
    let y_env_1157 := proj_1 15 y_1155 in 
    let y_1158 := app y_code_1156<3>(y_env_1157,v_1139) in 
    let y_code_1159 := proj_0 15 y_1151 in 
    let y_env_1160 := proj_1 15 y_1151 in 
    let y_1161 := app y_code_1159<3>(y_env_1160,y_1158) in 
    let y_proj_1162 := proj_0 384 env_1138 in 
    let stdpp.countable.N_countable_proj_1163 := proj_1 384 env_1138 in 
    let ConCert.Execution.OptionMonad.Monad_option_proj_1164 := proj_2 384 env_1138 in 
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1165 := proj_4 384 env_1138 in 
    let env_1166 := con_397(y_proj_1162,stdpp.countable.N_countable_proj_1163,ConCert.Execution.OptionMonad.Monad_option_proj_1164,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1165) in 
    let y_wrapper_clo_1167 := con_15(y_wrapper_208,env_1166) in 
    let y_code_1168 := proj_0 15 y_1161 in 
    let y_env_1169 := proj_1 15 y_1161 in 
    y_code_1168<3>(y_env_1169,y_wrapper_clo_1167)
  fun y_known_205<53>(p_1171,y_1172,stdpp.countable.N_countable_1173,ConCert.Execution.OptionMonad.Monad_option_1174,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1175) := 
    let env_1178 := con_273(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1175,stdpp.countable.N_countable_1173) in 
    let env_1179 := con_275(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1175,ConCert.Execution.OptionMonad.Monad_option_1174,stdpp.countable.N_countable_1173,y_1172) in 
    let y_1180 := con_99() in 
    let y_wrapper_clo_1181 := con_15(y_wrapper_160,env_1178) in 
    let y_clo_1182 := con_15(y_161,env_1179) in 
    let y_1183 := Build_Countable(y_wrapper_clo_1181,y_clo_1182,y_1180) in 
    let y_1186 := app stdpp.countable.decode_uncurried_uncurried_known_158<141>(y_1183) in 
    let y_code_1187 := proj_0 15 y_1186 in 
    let y_env_1188 := proj_1 15 y_1186 in 
    y_code_1187<3>(y_env_1188,p_1171)
  fun y_wrapper_206<3>(env_1189,y_1190) := 
    let x_proj_1192 := proj_0 391 env_1189 in 
    ConCert.Execution.BoundedN.BoundedN.Stdpp.BoundedNEqDec_uncurried_uncurried_known_118<3>(y_1190,x_proj_1192)
  fun y_wrapper_208<3>(env_1199,p_1200) := 
    let y_proj_1202 := proj_0 397 env_1199 in 
    let stdpp.countable.N_countable_proj_1203 := proj_1 397 env_1199 in 
    let ConCert.Execution.OptionMonad.Monad_option_proj_1204 := proj_2 397 env_1199 in 
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1205 := proj_3 397 env_1199 in 
    y_known_205<53>(p_1200,y_proj_1202,stdpp.countable.N_countable_proj_1203,ConCert.Execution.OptionMonad.Monad_option_proj_1204,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1205)
  fun y_209<3>(env_1206,a_1207) := 
    let y_1208 := xH() in 
    let y_1209 := xO(y_1208) in 
    let y_1210 := Npos(y_1209) in 
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1212 := proj_1 399 env_1206 in 
    let y_proj_1213 := proj_0 399 env_1206 in 
    let y_1214 := app f_case_known_210<88>(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_proj_1212,y_proj_1213,y_1210) in 
    let y_1216 := app f_case_known_212<154>(y_1214) in 
    let y_1219 := app ConCert.Execution.BoundedN.BoundedN.to_N_uncurried_known_112<127>(a_1207) in 
    let y_proj_1221 := proj_0 399 env_1206 in 
    Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(y_1219,y_1216,y_proj_1221)
  fun f_case_known_210<88>(s_1223,y_1224,y_1225) := 
    case s_1223 of {
    | N0 => 
      let y_1226 := N0() in 
      let y_1227 := N0() in 
      let y_1228 := pair(y_1226,y_1227) in 
      halt y_1228
    | Npos => 
      let na_1229 := proj_0 115 s_1223 in 
      pos_div_eucl_uncurried_known_211<88>(y_1225,na_1229,y_1224)
    }
  fun pos_div_eucl_uncurried_known_211<88>(b_1232,a_1233,y_1234) := 
    case a_1233 of {
    | xI => 
      let a'_1235 := proj_0 134 a_1233 in 
      let y_1236 := app pos_div_eucl_uncurried_known_211<88>(b_1232,a'_1235,y_1234) in 
      case y_1236 of {
      | pair => 
        let q_1237 := proj_0 122 y_1236 in 
        let r_1238 := proj_1 122 y_1236 in 
        let r'_1240 := app Coq.NArith.BinNatDef.N.succ_double_known_182<150>(r_1238) in 
        let y_1242 := app Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(r'_1240,b_1232,y_1234) in 
        case y_1242 of {
        | true => 
          let y_1244 := app Coq.NArith.BinNatDef.N.succ_double_known_182<150>(q_1237) in 
          let y_1246 := app Coq.NArith.BinNatDef.N.sub_uncurried_known_185<3>(b_1232,r'_1240) in 
          let y_1247 := pair(y_1244,y_1246) in 
          halt y_1247
        | false => 
          let y_1249 := app Coq.NArith.BinNatDef.N.double_known_188<153>(q_1237) in 
          let y_1250 := pair(y_1249,r'_1240) in 
          halt y_1250
        }
      }
    | xO => 
      let a'_1251 := proj_0 135 a_1233 in 
      let y_1252 := app pos_div_eucl_uncurried_known_211<88>(b_1232,a'_1251,y_1234) in 
      case y_1252 of {
      | pair => 
        let q_1253 := proj_0 122 y_1252 in 
        let r_1254 := proj_1 122 y_1252 in 
        let r'_1256 := app Coq.NArith.BinNatDef.N.double_known_188<153>(r_1254) in 
        let y_1258 := app Coq.NArith.BinNatDef.N.leb_uncurried_known_181<88>(r'_1256,b_1232,y_1234) in 
        case y_1258 of {
        | true => 
          let y_1260 := app Coq.NArith.BinNatDef.N.succ_double_known_182<150>(q_1253) in 
          let y_1262 := app Coq.NArith.BinNatDef.N.sub_uncurried_known_185<3>(b_1232,r'_1256) in 
          let y_1263 := pair(y_1260,y_1262) in 
          halt y_1263
        | false => 
          let y_1265 := app Coq.NArith.BinNatDef.N.double_known_188<153>(q_1253) in 
          let y_1266 := pair(y_1265,r'_1256) in 
          halt y_1266
        }
      }
    | xH => 
      case b_1232 of {
      | N0 => 
        let y_1267 := N0() in 
        let y_1268 := xH() in 
        let y_1269 := Npos(y_1268) in 
        let y_1270 := pair(y_1267,y_1269) in 
        halt y_1270
      | Npos => 
        let p_1271 := proj_0 115 b_1232 in 
        case p_1271 of {
        | xI => 
          let y_1272 := N0() in 
          let y_1273 := xH() in 
          let y_1274 := Npos(y_1273) in 
          let y_1275 := pair(y_1272,y_1274) in 
          halt y_1275
        | xO => 
          let y_1276 := N0() in 
          let y_1277 := xH() in 
          let y_1278 := Npos(y_1277) in 
          let y_1279 := pair(y_1276,y_1278) in 
          halt y_1279
        | xH => 
          let y_1280 := xH() in 
          let y_1281 := Npos(y_1280) in 
          let y_1282 := N0() in 
          let y_1283 := pair(y_1281,y_1282) in 
          halt y_1283
        }
      }
    }
  fun f_case_known_212<154>(s_1285) := 
    case s_1285 of {
    | pair => 
      let x_1286 := proj_0 122 s_1285 in 
      halt x_1286
    }
  fun Coq.ZArith.BinIntDef.Z.double_known_213<155>(x_1288) := 
    case x_1288 of {
    | Z0 => 
      let y_1289 := Z0() in 
      halt y_1289
    | Zpos => 
      let p_1290 := proj_0 124 x_1288 in 
      let y_1291 := xO(p_1290) in 
      let y_1292 := Zpos(y_1291) in 
      halt y_1292
    | Zneg => 
      let p_1293 := proj_0 125 x_1288 in 
      let y_1294 := xO(p_1293) in 
      let y_1295 := Zneg(y_1294) in 
      halt y_1295
    }
  fun Coq.ZArith.BinIntDef.Z.double_wrapper_214<3>(env_1296,x_1297) := 
    Coq.ZArith.BinIntDef.Z.double_known_213<155>(x_1297)
  fun Coq.ZArith.BinIntDef.Z.succ_double_known_215<156>(x_1300) := 
    case x_1300 of {
    | Z0 => 
      let y_1301 := xH() in 
      let y_1302 := Zpos(y_1301) in 
      halt y_1302
    | Zpos => 
      let p_1303 := proj_0 124 x_1300 in 
      let y_1304 := xI(p_1303) in 
      let y_1305 := Zpos(y_1304) in 
      halt y_1305
    | Zneg => 
      let p_1306 := proj_0 125 x_1300 in 
      let y_1308 := app pred_double_known_142<136>(p_1306) in 
      let y_1309 := Zneg(y_1308) in 
      halt y_1309
    }
  fun Coq.ZArith.BinIntDef.Z.succ_double_wrapper_216<3>(env_1310,x_1311) := 
    Coq.ZArith.BinIntDef.Z.succ_double_known_215<156>(x_1311)
  fun pos_sub_uncurried_known_217<3>(y_1314,x_1315) := 
    case x_1315 of {
    | xI => 
      let p_1316 := proj_0 134 x_1315 in 
      case y_1314 of {
      | xI => 
        let q_1317 := proj_0 134 y_1314 in 
        let y_1318 := app pos_sub_uncurried_known_217<3>(q_1317,p_1316) in 
        Coq.ZArith.BinIntDef.Z.double_known_213<155>(y_1318)
      | xO => 
        let q_1320 := proj_0 135 y_1314 in 
        let y_1321 := app pos_sub_uncurried_known_217<3>(q_1320,p_1316) in 
        Coq.ZArith.BinIntDef.Z.succ_double_known_215<156>(y_1321)
      | xH => 
        let y_1323 := xO(p_1316) in 
        let y_1324 := Zpos(y_1323) in 
        halt y_1324
      }
    | xO => 
      let p_1325 := proj_0 135 x_1315 in 
      case y_1314 of {
      | xI => 
        let q_1326 := proj_0 134 y_1314 in 
        let y_1327 := app pos_sub_uncurried_known_217<3>(q_1326,p_1325) in 
        case y_1327 of {
        | Z0 => 
          let y_1328 := xH() in 
          let y_1329 := Zneg(y_1328) in 
          halt y_1329
        | Zpos => 
          let p_1330 := proj_0 124 y_1327 in 
          let y_1332 := app pred_double_known_142<136>(p_1330) in 
          let y_1333 := Zpos(y_1332) in 
          halt y_1333
        | Zneg => 
          let p_1334 := proj_0 125 y_1327 in 
          let y_1335 := xI(p_1334) in 
          let y_1336 := Zneg(y_1335) in 
          halt y_1336
        }
      | xO => 
        let q_1337 := proj_0 135 y_1314 in 
        let y_1338 := app pos_sub_uncurried_known_217<3>(q_1337,p_1325) in 
        Coq.ZArith.BinIntDef.Z.double_known_213<155>(y_1338)
      | xH => 
        let y_1341 := app pred_double_known_142<136>(p_1325) in 
        let y_1342 := Zpos(y_1341) in 
        halt y_1342
      }
    | xH => 
      case y_1314 of {
      | xI => 
        let q_1343 := proj_0 134 y_1314 in 
        let y_1344 := xO(q_1343) in 
        let y_1345 := Zneg(y_1344) in 
        halt y_1345
      | xO => 
        let q_1346 := proj_0 135 y_1314 in 
        let y_1348 := app pred_double_known_142<136>(q_1346) in 
        let y_1349 := Zneg(y_1348) in 
        halt y_1349
      | xH => 
        let y_1350 := Z0() in 
        halt y_1350
      }
    }
  fun Coq.ZArith.BinIntDef.Z.add_uncurried_known_218<3>(y_1352,x_1353) := 
    case x_1353 of {
    | Z0 => 
      halt y_1352
    | Zpos => 
      let x'_1354 := proj_0 124 x_1353 in 
      case y_1352 of {
      | Z0 => 
        halt x_1353
      | Zpos => 
        let y'_1355 := proj_0 124 y_1352 in 
        let y_1357 := app add_uncurried_known_189<3>(y'_1355,x'_1354) in 
        let y_1358 := Zpos(y_1357) in 
        halt y_1358
      | Zneg => 
        let y'_1359 := proj_0 125 y_1352 in 
        pos_sub_uncurried_known_217<3>(y'_1359,x'_1354)
      }
    | Zneg => 
      let x'_1361 := proj_0 125 x_1353 in 
      case y_1352 of {
      | Z0 => 
        halt x_1353
      | Zpos => 
        let y'_1362 := proj_0 124 y_1352 in 
        pos_sub_uncurried_known_217<3>(x'_1361,y'_1362)
      | Zneg => 
        let y'_1364 := proj_0 125 y_1352 in 
        let y_1366 := app add_uncurried_known_189<3>(y'_1364,x'_1361) in 
        let y_1367 := Zneg(y_1366) in 
        halt y_1367
      }
    }
  fun ConCert.Examples.Counter.Counter.count_uncurried_known_219<157>(s_1369) := 
    case s_1369 of {
    | build_state => 
      let count_1371 := proj_0 102 s_1369 in 
      halt count_1371
    }
  fun ConCert.Examples.Counter.Counter.owner_uncurried_known_220<158>(s_1373) := 
    case s_1373 of {
    | build_state => 
      let owner_1375 := proj_1 102 s_1373 in 
      halt owner_1375
    }
  fun of_pos_rec_uncurried_known_221<3>(p_1377,n_1378) := 
    case n_1378 of {
    | O => 
      let y_1379 := prim: (int: 0) in 
      halt y_1379
    | S => 
      let n_1380 := proj_0 145 n_1378 in 
      case p_1377 of {
      | xI => 
        let p_1381 := proj_0 134 p_1377 in 
        let y_1382 := app of_pos_rec_uncurried_known_221<3>(p_1381,n_1380) in 
        let y_1383 := prim: (int: 1) in 
        let prim_1384 := prim_104(y_1382,y_1383) in 
        let y_1385 := prim: (int: 1) in 
        let prim_1386 := prim_106(prim_1384,y_1385) in 
        halt prim_1386
      | xO => 
        let p_1387 := proj_0 135 p_1377 in 
        let y_1388 := app of_pos_rec_uncurried_known_221<3>(p_1387,n_1380) in 
        let y_1389 := prim: (int: 1) in 
        let prim_1390 := prim_104(y_1388,y_1389) in 
        halt prim_1390
      | xH => 
        let y_1391 := prim: (int: 1) in 
        halt y_1391
      }
    }
  fun ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_known_222<3>(s_1393,Coq.Numbers.Cyclic.Int63.Uint63.size_1394) := 
    case s_1393 of {
    | build_state => 
      let count_1395 := proj_0 102 s_1393 in 
      case count_1395 of {
      | Z0 => 
        let y_1396 := prim: (int: 0) in 
        halt y_1396
      | Zpos => 
        let p_1397 := proj_0 124 count_1395 in 
        of_pos_rec_uncurried_known_221<3>(p_1397,Coq.Numbers.Cyclic.Int63.Uint63.size_1394)
      | Zneg => 
        let p_1399 := proj_0 125 count_1395 in 
        let y_1401 := app of_pos_rec_uncurried_known_221<3>(p_1399,Coq.Numbers.Cyclic.Int63.Uint63.size_1394) in 
        let y_1402 := prim: (int: 0) in 
        let prim_1403 := prim_105(y_1402,y_1401) in 
        halt prim_1403
      }
    }
  fun ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_223<3>(env_1404,s_1405) := 
    let Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1407 := proj_0 441 env_1404 in 
    ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_known_222<3>(s_1405,Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1407)
  fun to_Z_rec_uncurried_known_224<3>(i_1409,n_1410) := 
    case n_1410 of {
    | O => 
      let y_1411 := Z0() in 
      halt y_1411
    | S => 
      let n_1412 := proj_0 145 n_1410 in 
      let y_1414 := prim: (int: 1) in 
      let prim_1415 := prim_102(i_1409,y_1414) in 
      let y_1416 := prim: (int: 0) in 
      let prim_1417 := prim_101(prim_1415,y_1416) in 
      let y_1418 := app f_case_known_225<159>(prim_1417) in 
      let y_1419 := prim: (int: 1) in 
      let prim_1420 := prim_103(i_1409,y_1419) in 
      let y_1421 := app to_Z_rec_uncurried_known_224<3>(prim_1420,n_1412) in 
      let y_code_1422 := proj_0 15 y_1418 in 
      let y_env_1423 := proj_1 15 y_1418 in 
      y_code_1422<3>(y_env_1423,y_1421)
    }
  fun f_case_known_225<159>(s_1425) := 
    case s_1425 of {
    | true => 
      let Coq.ZArith.BinIntDef.Z.double_wrapperbogus_env_1426 := con_445() in 
      let Coq.ZArith.BinIntDef.Z.double_wrapper_clo_1427 := con_15(Coq.ZArith.BinIntDef.Z.double_wrapper_214,Coq.ZArith.BinIntDef.Z.double_wrapperbogus_env_1426) in 
      halt Coq.ZArith.BinIntDef.Z.double_wrapper_clo_1427
    | false => 
      let Coq.ZArith.BinIntDef.Z.succ_double_wrapperbogus_env_1428 := con_446() in 
      let Coq.ZArith.BinIntDef.Z.succ_double_wrapper_clo_1429 := con_15(Coq.ZArith.BinIntDef.Z.succ_double_wrapper_216,Coq.ZArith.BinIntDef.Z.succ_double_wrapperbogus_env_1428) in 
      halt Coq.ZArith.BinIntDef.Z.succ_double_wrapper_clo_1429
    }
  fun y_wrapper_226<3>(env_1430,init_value_1431) := 
    let ctx_proj_1432 := proj_0 451 env_1430 in 
    let y_1434 := app f_case_known_228<160>(ctx_proj_1432) in 
    let y_1435 := build_state(init_value_1431,y_1434) in 
    let y_1436 := Ok(y_1435) in 
    halt y_1436
  fun y_wrapper_227<3>(env_1437,ctx_1438) := 
    let chain_proj_1439 := proj_0 453 env_1437 in 
    let env_1440 := con_451(ctx_1438,chain_proj_1439) in 
    let y_wrapper_clo_1441 := con_15(y_wrapper_226,env_1440) in 
    halt y_wrapper_clo_1441
  fun f_case_known_228<160>(s_1443) := 
    case s_1443 of {
    | build_ctx => 
      let ctx_from_1444 := proj_1 116 s_1443 in 
      halt ctx_from_1444
    }
  fun y_wrapper_229<3>(env_1445,chain_1446) := 
    let env_1447 := con_453(chain_1446) in 
    let y_wrapper_clo_1448 := con_15(y_wrapper_227,env_1447) in 
    halt y_wrapper_clo_1448
  fun y_230<3>(env_1449,msg_1450) := 
    let state_proj_1452 := proj_0 461 env_1449 in 
    let y_proj_1455 := proj_5 461 env_1449 in 
    let y_proj_1456 := proj_4 461 env_1449 in 
    let ConCert.Examples.Counter.Counter.default_error_proj_1457 := proj_3 461 env_1449 in 
    y_uncurried_uncurried_uncurried_known_233<53>(msg_1450,state_proj_1452,y_proj_1455,y_proj_1456,ConCert.Examples.Counter.Counter.default_error_proj_1457)
  fun y_wrapper_231<3>(env_1458,state_1459) := 
    let y_proj_1460 := proj_4 463 env_1458 in 
    let y_proj_1461 := proj_3 463 env_1458 in 
    let ConCert.Examples.Counter.Counter.default_error_proj_1462 := proj_2 463 env_1458 in 
    let chain_proj_1463 := proj_1 463 env_1458 in 
    let ctx_proj_1464 := proj_0 463 env_1458 in 
    let env_1465 := con_461(state_1459,ctx_proj_1464,chain_proj_1463,ConCert.Examples.Counter.Counter.default_error_proj_1462,y_proj_1461,y_proj_1460) in 
    let y_clo_1466 := con_15(y_230,env_1465) in 
    halt y_clo_1466
  fun y_wrapper_232<3>(env_1467,ctx_1468) := 
    let y_proj_1469 := proj_3 465 env_1467 in 
    let y_proj_1470 := proj_2 465 env_1467 in 
    let ConCert.Examples.Counter.Counter.default_error_proj_1471 := proj_1 465 env_1467 in 
    let chain_proj_1472 := proj_0 465 env_1467 in 
    let env_1473 := con_463(ctx_1468,chain_proj_1472,ConCert.Examples.Counter.Counter.default_error_proj_1471,y_proj_1470,y_proj_1469) in 
    let y_wrapper_clo_1474 := con_15(y_wrapper_231,env_1473) in 
    halt y_wrapper_clo_1474
  fun y_uncurried_uncurried_uncurried_known_233<53>(msg_1476,state_1477,y_1480,y_1481,ConCert.Examples.Counter.Counter.default_error_1482) := 
    case msg_1476 of {
    | Some => 
      let m_1483 := proj_0 132 msg_1476 in 
      let env_1484 := con_467(state_1477,ConCert.Examples.Counter.Counter.default_error_1482,y_1481,y_1480) in 
      let y_1485 := app f_case_234<3>(env_1484,m_1483) in 
      case y_1485 of {
      | Ok => 
        let res_1486 := proj_0 103 y_1485 in 
        let y_1487 := nil() in 
        let y_1488 := pair(res_1486,y_1487) in 
        let y_1489 := Ok(y_1488) in 
        halt y_1489
      | Err => 
        let e_1490 := proj_0 104 y_1485 in 
        let y_1491 := Err(e_1490) in 
        halt y_1491
      }
    | None => 
      let y_1492 := Err(ConCert.Examples.Counter.Counter.default_error_1482) in 
      halt y_1492
    }
  fun f_case_234<3>(env_1493,s_1494) := 
    case s_1494 of {
    | Inc => 
      let i_1495 := proj_0 100 s_1494 in 
      let y_1496 := Z0() in 
      let y_proj_1498 := proj_3 467 env_1493 in 
      let y_1499 := app Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(i_1495,y_1496,y_proj_1498) in 
      case y_1499 of {
      | true => 
        let state_proj_1501 := proj_0 467 env_1493 in 
        let y_1503 := app ConCert.Examples.Counter.Counter.count_uncurried_known_219<157>(state_proj_1501) in 
        let y_1505 := app Coq.ZArith.BinIntDef.Z.add_uncurried_known_218<3>(i_1495,y_1503) in 
        let state_proj_1507 := proj_0 467 env_1493 in 
        let y_1509 := app ConCert.Examples.Counter.Counter.owner_uncurried_known_220<158>(state_proj_1507) in 
        let y_1510 := build_state(y_1505,y_1509) in 
        let y_1511 := Ok(y_1510) in 
        halt y_1511
      | false => 
        let ConCert.Examples.Counter.Counter.default_error_proj_1512 := proj_1 467 env_1493 in 
        let y_1513 := Err(ConCert.Examples.Counter.Counter.default_error_proj_1512) in 
        halt y_1513
      }
    | Dec => 
      let i_1514 := proj_0 101 s_1494 in 
      let y_1515 := Z0() in 
      let y_proj_1517 := proj_3 467 env_1493 in 
      let y_1518 := app Coq.ZArith.BinIntDef.Z.ltb_uncurried_known_174<88>(i_1514,y_1515,y_proj_1517) in 
      case y_1518 of {
      | true => 
        let state_proj_1520 := proj_0 467 env_1493 in 
        let y_1522 := app ConCert.Examples.Counter.Counter.count_uncurried_known_219<157>(state_proj_1520) in 
        let y_1524 := app f_case_known_235<161>(i_1514) in 
        let y_1526 := app Coq.ZArith.BinIntDef.Z.add_uncurried_known_218<3>(y_1524,y_1522) in 
        let state_proj_1528 := proj_0 467 env_1493 in 
        let y_1530 := app ConCert.Examples.Counter.Counter.owner_uncurried_known_220<158>(state_proj_1528) in 
        let y_1531 := build_state(y_1526,y_1530) in 
        let y_1532 := Ok(y_1531) in 
        halt y_1532
      | false => 
        let ConCert.Examples.Counter.Counter.default_error_proj_1533 := proj_1 467 env_1493 in 
        let y_1534 := Err(ConCert.Examples.Counter.Counter.default_error_proj_1533) in 
        halt y_1534
      }
    }
  fun f_case_known_235<161>(s_1536) := 
    case s_1536 of {
    | Z0 => 
      let y_1537 := Z0() in 
      halt y_1537
    | Zpos => 
      let x_1538 := proj_0 124 s_1536 in 
      let y_1539 := Zneg(x_1538) in 
      halt y_1539
    | Zneg => 
      let x_1540 := proj_0 125 s_1536 in 
      let y_1541 := Zpos(x_1540) in 
      halt y_1541
    }
  fun y_wrapper_236<3>(env_1542,chain_1543) := 
    let y_proj_1544 := proj_0 477 env_1542 in 
    let y_proj_1545 := proj_1 477 env_1542 in 
    let ConCert.Examples.Counter.Counter.default_error_proj_1546 := proj_2 477 env_1542 in 
    let env_1547 := con_465(chain_1543,ConCert.Examples.Counter.Counter.default_error_proj_1546,y_proj_1545,y_proj_1544) in 
    let y_wrapper_clo_1548 := con_15(y_wrapper_232,env_1547) in 
    halt y_wrapper_clo_1548
  fun y_wrapper_237<3>(env_1549,p_1550) := 
    let Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1551 := proj_0 481 env_1549 in 
    let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_proj_1552 := proj_1 481 env_1549 in 
    let y_1554 := app to_Z_rec_uncurried_known_224<3>(p_1550,Coq.Numbers.Cyclic.Int63.Uint63.size_proj_1551) in 
    let y_1555 := build_state(y_1554,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_proj_1552) in 
    halt y_1555
] in
let y_1556 := Eq() in 
let env_1557 := con_239() in 
let env_1558 := con_245() in 
let y_1559 := con_99() in 
let y_wrapper_clo_1560 := con_15(y_wrapper_146,env_1557) in 
let y_wrapper_clo_1561 := con_15(y_wrapper_149,env_1558) in 
let stdpp.countable.N_countable_1562 := Build_Countable(y_wrapper_clo_1560,y_wrapper_clo_1561,y_1559) in 
let env_1563 := con_252() in 
let env_1564 := con_265() in 
let y_wrapper_clo_1565 := con_15(y_wrapper_152,env_1563) in 
let y_wrapper_clo_1566 := con_15(y_wrapper_157,env_1564) in 
let ConCert.Execution.OptionMonad.Monad_option_1567 := build_monad(y_wrapper_clo_1565,y_wrapper_clo_1566) in 
let env_1568 := con_286() in 
let y_1569 := ser_int() in 
let env_1570 := con_288(y_1569) in 
let y_1571 := con_99() in 
let y_wrapper_clo_1572 := con_15(y_wrapper_166,env_1568) in 
let y_clo_1573 := con_15(y_167,env_1570) in 
let ConCert.Execution.Serializable.int_serializable_1574 := build_serializable(y_wrapper_clo_1572,y_clo_1573,y_1571) in 
let env_1575 := con_301(ConCert.Execution.Serializable.int_serializable_1574) in 
let env_1576 := con_303(y_1556,ConCert.Execution.OptionMonad.Monad_option_1567,ConCert.Execution.Serializable.int_serializable_1574) in 
let y_1577 := con_99() in 
let y_wrapper_clo_1578 := con_15(y_wrapper_176,env_1575) in 
let y_clo_1579 := con_15(y_177,env_1576) in 
let ConCert.Execution.Serializable.ser_positive_equivalence_1580 := build_serializable(y_wrapper_clo_1578,y_clo_1579,y_1577) in 
let y_1581 := xH() in 
let y_1582 := xO(y_1581) in 
let y_1583 := xH() in 
let y_1584 := xO(y_1583) in 
let y_1585 := xO(y_1584) in 
let y_1586 := xO(y_1585) in 
let y_1587 := Npos(y_1586) in 
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1589 := app f_case_known_191<3>(y_1587,y_1582) in 
let y_1590 := con_99() in 
let env_1591 := con_355(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1589) in 
let env_1592 := con_362(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1589) in 
let env_1593 := con_369(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1589) in 
let env_1594 := con_273(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1589,stdpp.countable.N_countable_1562) in 
let env_1595 := con_275(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1589,ConCert.Execution.OptionMonad.Monad_option_1567,stdpp.countable.N_countable_1562,y_1556) in 
let y_1596 := con_99() in 
let y_wrapper_clo_1597 := con_15(y_wrapper_160,env_1594) in 
let y_clo_1598 := con_15(y_161,env_1595) in 
let y_1599 := Build_Countable(y_wrapper_clo_1597,y_clo_1598,y_1596) in 
let env_1600 := con_382(y_1556,stdpp.countable.N_countable_1562,ConCert.Execution.OptionMonad.Monad_option_1567,ConCert.Execution.Serializable.ser_positive_equivalence_1580,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1589) in 
let env_1601 := con_384(y_1556,stdpp.countable.N_countable_1562,ConCert.Execution.OptionMonad.Monad_option_1567,ConCert.Execution.Serializable.ser_positive_equivalence_1580,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1589) in 
let y_1602 := con_99() in 
let y_wrapper_clo_1603 := con_15(y_wrapper_203,env_1600) in 
let y_clo_1604 := con_15(y_204,env_1601) in 
let y_1605 := build_serializable(y_wrapper_clo_1603,y_clo_1604,y_1602) in 
let env_1606 := con_399(y_1556,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.AddrSize_1589) in 
let y_wrapper_clo_1607 := con_15(y_wrapper_195,env_1591) in 
let y_wrapper_clo_1608 := con_15(y_wrapper_197,env_1592) in 
let y_wrapper_clo_1609 := con_15(y_wrapper_199,env_1593) in 
let y_clo_1610 := con_15(y_209,env_1606) in 
let y_1611 := build_chain_base(y_1590,y_wrapper_clo_1607,y_wrapper_clo_1608,y_wrapper_clo_1609,y_1599,y_1605,y_clo_1610) in 
let y_1612 := O() in 
let ConCert.Examples.Counter.Counter.default_error_1613 := S(y_1612) in 
let y_1614 := O() in 
let y_1615 := S(y_1614) in 
let y_1616 := S(y_1615) in 
let y_1617 := S(y_1616) in 
let y_1618 := S(y_1617) in 
let y_1619 := S(y_1618) in 
let y_1620 := S(y_1619) in 
let y_1621 := S(y_1620) in 
let y_1622 := S(y_1621) in 
let y_1623 := S(y_1622) in 
let y_1624 := S(y_1623) in 
let y_1625 := S(y_1624) in 
let y_1626 := S(y_1625) in 
let y_1627 := S(y_1626) in 
let y_1628 := S(y_1627) in 
let y_1629 := S(y_1628) in 
let y_1630 := S(y_1629) in 
let y_1631 := S(y_1630) in 
let y_1632 := S(y_1631) in 
let y_1633 := S(y_1632) in 
let y_1634 := S(y_1633) in 
let y_1635 := S(y_1634) in 
let y_1636 := S(y_1635) in 
let y_1637 := S(y_1636) in 
let y_1638 := S(y_1637) in 
let y_1639 := S(y_1638) in 
let y_1640 := S(y_1639) in 
let y_1641 := S(y_1640) in 
let y_1642 := S(y_1641) in 
let y_1643 := S(y_1642) in 
let y_1644 := S(y_1643) in 
let y_1645 := S(y_1644) in 
let y_1646 := S(y_1645) in 
let y_1647 := S(y_1646) in 
let y_1648 := S(y_1647) in 
let y_1649 := S(y_1648) in 
let y_1650 := S(y_1649) in 
let y_1651 := S(y_1650) in 
let y_1652 := S(y_1651) in 
let y_1653 := S(y_1652) in 
let y_1654 := S(y_1653) in 
let y_1655 := S(y_1654) in 
let y_1656 := S(y_1655) in 
let y_1657 := S(y_1656) in 
let y_1658 := S(y_1657) in 
let y_1659 := S(y_1658) in 
let y_1660 := S(y_1659) in 
let y_1661 := S(y_1660) in 
let y_1662 := S(y_1661) in 
let y_1663 := S(y_1662) in 
let y_1664 := S(y_1663) in 
let y_1665 := S(y_1664) in 
let y_1666 := S(y_1665) in 
let y_1667 := S(y_1666) in 
let y_1668 := S(y_1667) in 
let y_1669 := S(y_1668) in 
let y_1670 := S(y_1669) in 
let y_1671 := S(y_1670) in 
let y_1672 := S(y_1671) in 
let y_1673 := S(y_1672) in 
let y_1674 := S(y_1673) in 
let y_1675 := S(y_1674) in 
let y_1676 := S(y_1675) in 
let Coq.Numbers.Cyclic.Int63.Uint63.size_1677 := S(y_1676) in 
let env_1678 := con_441(Coq.Numbers.Cyclic.Int63.Uint63.size_1677) in 
let y_1679 := N0() in 
let y_1680 := con_99() in 
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_1681 := bounded(y_1679,y_1680) in 
let env_1682 := con_456() in 
let env_1683 := con_477(y_1556,y_1611,ConCert.Examples.Counter.Counter.default_error_1613) in 
let env_1684 := con_481(Coq.Numbers.Cyclic.Int63.Uint63.size_1677,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.zero_1681) in 
let y_wrapper_clo_1685 := con_15(y_wrapper_229,env_1682) in 
let y_wrapper_clo_1686 := con_15(y_wrapper_236,env_1683) in 
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_clo_1687 := con_15(ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_223,env_1678) in 
let y_wrapper_clo_1688 := con_15(y_wrapper_237,env_1684) in 
let ConCert.Examples.Counter.extraction.CounterConcordiumWasm.COUNTER_MODULE_1689 := Build_ConcordiumWasmMod(y_wrapper_clo_1685,y_wrapper_clo_1686,ConCert.Examples.Counter.extraction.CounterConcordiumWasm.encode_counter_wrapper_clo_1687,y_wrapper_clo_1688) in 
halt ConCert.Examples.Counter.extraction.CounterConcordiumWasm.COUNTER_MODULE_1689

